{
  "hash": "8065f834534252fec113fea1b0a440ed",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Processing CIAP AUPs and Working with `DepartmentCollection`s\"\nauthor: \"John McLevey\"\ndate: today\ndate-modified: today\ncategories: [AUPs, DepartmentCollection, data processing]\nimage: \"../../images/image.jpg\"\ndraft: true\n---\n\n\nThe `Department` and `DepartmentCollection` classes provide a structured and extensible framework for representing and working with **CIAP Academic Unit Plan (AUP) data** and other optional department-level information. At the core is the `Department` dataclass, which models a single academic unit in a specific year. It stores core identifiers (`unit`, `year`, and `academic_year`) along with a flexible dictionary containing every field in the CIAP AUPs. This design makes each department-year record self-contained and straightforward to inspect, transform, or export using methods like `.to_dict()` or `.to_dataframe()`.\n\nThe `DepartmentCollection` class wraps a list of individual department instances and offers useful methods for building, filtering, and aggregating them. It can be instantiated using a tidy DataFrame, typically one created through upstream processing of the original Excel files. Internally, it decomposes each row into its metadata and variable fields and constructs a corresponding `Department` object. Methods like `.to_dataframe()` reconstruct the full dataset for analysis (after deduplication and other cleaning in `beachmaster`'s loading layer), while `.get(unit, year)` and `.filter()` allow precise subsetting based on unit names, years, or any other variable (e.g., total faculty count or expenditures).\n\nNote that the `.get()` method returns a new `DepartmentCollection` so that users can immediately chain `.to_dataframe()` or additional `.filter()` calls. The `.summary() method`, meanwhile, provides a quick statistical overview of the numeric variables grouped by department. This is just placeholder functionality for now; I'll develop it later.\n\nThis module is designed to connect easily with other components of the beachmaster ecosystem — it treats each AUP record as an entity with attributes and behaviors, not just a flat row of observed data. That makes it easy to incorporate additional logic down the line (e.g., plotting, flagging anomalies, exporting summaries). \n\nThis notebook provides a working implementation of the full data restructuring pipeline for CIAP Academic Unit Plans (AUPs), aligned with the overall HSS Data & Models project goals with Meghan Burchell. It begins by setting up the environment using utilities from the `beachmaster` package — configuring paths, reading in YAML-based metadata, and applying visual styling. The main goal is to read a messy Excel report containing department-level statistics and transform it into a clean, structured dataset ready for modeling, visualization, or further enrichment.\n\nThe core transformation is handled by the `process_ciap_aup_excel_file()` function, which reads every sheet in the Excel workbook (skipping those defined as ignorable), extracts structured tables by slicing and transposing relevant blocks, labels the variables using predefined mappings, and merges all resulting tables by department and academic year. The function returns a wide-format DataFrame and writes it to disk as a reproducible intermediate dataset that can easily be shared with anyone. This design reflects our broader preference for transparent, inspectable data pipelines that separate transformation logic from downstream use.\n\nThe processed data can now be passed to the `DepartmentCollection` class. This allows the dataset to be used as a collection of structured objects — each one representing a department-year combination — rather than as a flat table. Examples in the notebook show how to retrieve a specific department-year using `.get(\"Anth\", 2016)`, convert it to table for printing (including as a nicely formatted Markdown string), or extract all rows for a unit over time (e.g., Sociology). The notebook also demonstrates how to filter for departments meeting a specific condition (e.g., exactly five permanent faculty members), which returns a new collection that can be further explored or visualized.\n\nOverall, this notebook exemplifies the modular and expressive style of data work we're aiming for in `beachmaster`. Each step is testable, reusable, and clearly scoped — from raw ingestion to structured object modeling to user-driven queries. By combining tidy data principles with an object-oriented wrapper around our institutional knowledge as captured in the generative domain model (**link to documentation**), this approach lays a solid foundation for more advanced analyses, equity audits, forecasting models, or decision support dashboards.\n\n\n# Restructure Academic Unit Plans (AUPs)\n\n\n# Constructing `DepartmentCollection`s\n\n\n## Querying a `DepartmentCollection`\n\nGet a single department-year, e.g., Anthropology in 2016.\n\n\n\n\nGet all rows for a department, e.g., Sociology.\n\n\nSelect rows (Dept, Year combinations) that have a specific attribute value, such as exactly 5 permanent faculty members.\n\n\n# Export All AUP Data to DataFrame\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}